---
description: 
globs: 
alwaysApply: false
---
# Tailwind CSS 樣式指南

## Tailwind CSS 設定

此專案使用 **Tailwind CSS v4** 進行樣式設計，設定檔案：
- **[vite.config.ts](mdc:vite.config.ts)** - Vite 中的 Tailwind 插件設定
- **[src/index.css](mdc:src/index.css)** - 全域樣式和 Tailwind 基礎

## 元件樣式組織原則

### 樣式優先順序
1. **Layout**：margin, padding, display, position
2. **Size**：width, height, max-width, min-height
3. **Typography**：font-size, font-weight, text-color
4. **Background & Border**：background-color, border
5. **State**：hover, focus, active, disabled

### 範例樣式結構
```typescript
// 良好的 className 組織
<button className="
  px-4 py-2                    // Layout
  w-full max-w-xs              // Size  
  text-sm font-medium text-white  // Typography
  bg-blue-600 border border-blue-700  // Background & Border
  hover:bg-blue-700 focus:ring-2 focus:ring-blue-500  // State
  rounded-md transition-colors duration-200  // Misc
">
  送出
</button>
```

## 響應式設計模式

### 行動優先設計
```typescript
// 從小螢幕開始，向上擴展
<div className="
  grid grid-cols-1        // 行動版：單欄
  md:grid-cols-2          // 平板：雙欄
  lg:grid-cols-3          // 桌面：三欄
  gap-4 md:gap-6 lg:gap-8 // 響應式間距
">
```

### 常用響應式斷點
- `sm:` - 640px 以上
- `md:` - 768px 以上  
- `lg:` - 1024px 以上
- `xl:` - 1280px 以上
- `2xl:` - 1536px 以上

## 元件樣式模式

### 卡片元件樣式
```typescript
<div className="
  bg-white rounded-lg shadow-md
  border border-gray-200
  p-6 space-y-4
  hover:shadow-lg transition-shadow
">
```

### 按鈕變體設計
```typescript
// 主要按鈕
const primaryButton = "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500"

// 次要按鈕  
const secondaryButton = "px-4 py-2 bg-gray-200 text-gray-900 rounded-md hover:bg-gray-300 focus:ring-2 focus:ring-gray-500"

// 危險按鈕
const dangerButton = "px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:ring-2 focus:ring-red-500"
```

### 表單元件樣式
```typescript
// 輸入框
<input className="
  w-full px-3 py-2
  border border-gray-300 rounded-md
  focus:ring-2 focus:ring-blue-500 focus:border-blue-500
  placeholder:text-gray-400
" />

// 標籤
<label className="block text-sm font-medium text-gray-700 mb-1">

// 錯誤訊息
<p className="text-red-600 text-sm mt-1">
```

## 狀態指示樣式

### 載入狀態
```typescript
// 載入中指示器
<div className="flex items-center justify-center py-8">
  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  <span className="ml-2 text-gray-600">載入中...</span>
</div>
```

### 錯誤狀態
```typescript
// 錯誤訊息框
<div className="
  bg-red-50 border border-red-200 rounded-md p-4
  text-red-800 text-sm
">
  <div className="flex items-center">
    <ExclamationIcon className="h-5 w-5 text-red-400 mr-2" />
    發生錯誤，請稍後再試
  </div>
</div>
```

### 成功狀態
```typescript
// 成功訊息框
<div className="
  bg-green-50 border border-green-200 rounded-md p-4
  text-green-800 text-sm
">
  <div className="flex items-center">
    <CheckIcon className="h-5 w-5 text-green-400 mr-2" />
    操作成功完成
  </div>
</div>
```

## 布局模式

### 容器布局
```typescript
// 主要容器
<div className="container mx-auto px-4 sm:px-6 lg:px-8">

// 最大寬度限制
<div className="max-w-7xl mx-auto">

// 置中內容
<div className="max-w-2xl mx-auto">
```

### 網格布局
```typescript
// 響應式網格
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

// 固定比例網格
<div className="grid grid-cols-12 gap-4">
  <div className="col-span-12 md:col-span-8">主要內容</div>
  <div className="col-span-12 md:col-span-4">側邊欄</div>
</div>
```

### Flexbox 布局
```typescript
// 水平置中
<div className="flex items-center justify-center">

// 空間分配
<div className="flex items-center justify-between">

// 垂直堆疊
<div className="flex flex-col space-y-4">
```

## 動畫和過渡效果

### 基礎過渡
```typescript
// 通用過渡效果
className="transition-all duration-200 ease-in-out"

// 顏色過渡
className="transition-colors duration-200"

// 陰影過渡  
className="transition-shadow duration-200"
```

### 懸停效果
```typescript
// 按鈕懸停
className="hover:bg-blue-700 hover:scale-105 transform transition-all"

// 卡片懸停
className="hover:shadow-lg hover:-translate-y-1 transition-all duration-200"
```

## 樣式組織最佳實踐

### 避免重複樣式
建立可重用的樣式常數：
```typescript
// 在元件檔案頂部定義
const cardStyles = "bg-white rounded-lg shadow-md border border-gray-200 p-6"
const buttonStyles = "px-4 py-2 rounded-md font-medium transition-colors duration-200"

// 使用時組合
<div className={`${cardStyles} hover:shadow-lg`}>
<button className={`${buttonStyles} bg-blue-600 text-white hover:bg-blue-700`}>
```

### 條件式樣式
```typescript
// 使用三元運算子
<div className={`
  px-4 py-2 rounded-md
  ${isActive ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}
  ${isDisabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-md'}
`}>

// 使用 clsx 或 classnames 函式庫（可選）
import clsx from 'clsx'

<div className={clsx(
  'px-4 py-2 rounded-md',
  {
    'bg-blue-600 text-white': isActive,
    'bg-gray-200 text-gray-700': !isActive,
    'opacity-50 cursor-not-allowed': isDisabled
  }
)}>
```

## 樣式檢查清單

1. ✅ 遵循行動優先響應式設計
2. ✅ 按邏輯順序組織 className
3. ✅ 使用語意化的間距（space-y, gap）
4. ✅ 實作一致的懸停和焦點狀態
5. ✅ 為互動元素添加過渡效果
6. ✅ 使用適當的色彩對比度
7. ✅ 避免內聯樣式，優先使用 Tailwind
8. ✅ 為不同狀態設計清楚的視覺回饋
